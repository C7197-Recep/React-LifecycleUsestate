{"version":3,"sources":["TestComponent.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["timeout","TestComponent","props","handleClick","setState","counter","state","isVisible","name","console","log","color","this","setTimeout","prevprops","prevstate","clearTimeout","onClick","Component","App","useState","setIsVisible","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8KAEIA,E,kDCFW,I,wCD8GAC,E,kDAzGX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAgFVC,YAAc,WACV,EAAKC,SAAS,CAACC,QAAQ,EAAKC,MAAMD,QAAQ,KAlF5B,EAuFlBE,UAAU,WACN,EAAKH,SAAS,CAACG,WAAW,EAAKD,MAAMC,aAtFrC,EAAKD,MAAM,CACPE,KAAK,YAELH,QAAQ,EACRE,WAAU,GAEdE,QAAQC,IAAI,0BACZD,QAAQC,IAAI,EAAKR,MAAMS,OATT,E,qDAqClB,WAAoB,IAAD,OACfF,QAAQC,IAAI,2BACZD,QAAQC,IAAI,SAAUE,KAAKN,OAI3BN,EAAQa,YAAW,WACf,EAAKT,SAAS,CAACC,QAAQ,EAAKC,MAAMD,QAAQ,MAC5C,O,qCAIN,WAGI,OAFAI,QAAQC,IAAI,aAAcE,KAAKE,WAC/BL,QAAQC,IAAI,cAAeE,KAAKG,WACzB,O,gCAIX,WACIN,QAAQC,IAAI,4BACZD,QAAQC,IAAI,SAAUE,KAAKN,S,kCAK/B,WACIG,QAAQC,IAAI,8BACZD,QAAQC,IAAI,SAAUE,KAAKN,OAC3BU,aAAahB,K,mCAOjB,WAGI,OAFAS,QAAQC,IAAI,kCAELE,KAAKN,MAAMD,QAAQ,K,oBAe9B,WAEI,OADAI,QAAQC,IAAI,kBAAmBE,KAAKN,OAEhC,gCACI,qEACA,oGACA,4BAAIM,KAAKV,MAAMS,QACf,4BAAIC,KAAKN,MAAMK,QACf,yBAAQM,QAASL,KAAKT,YAAtB,sBAA6CS,KAAKN,MAAMD,iB,uCA1EpE,SAAgCH,EAAOI,GAMnC,OALAG,QAAQC,IAAI,qCACZD,QAAQC,IAAI,SAAUR,GACtBO,QAAQC,IAAI,SAAUJ,GAGf,CAACK,MAAM,a,GAhCMO,aEqBbC,MApBf,WAAe,MAMqBC,oBAAS,GAN9B,mBAMNb,EANM,KAMKc,EANL,KAQb,OACE,sBAAKC,UAAU,MAAf,UACGf,EACC,cAAC,EAAD,CAAeI,MAAM,QAErB,KAEF,wBAAQM,QAAS,kBAAII,GAAcd,IAAnC,wBCRSgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9935b589.chunk.js","sourcesContent":["import {Component} from \"react\";\r\n\r\nvar timeout;\r\n\r\nclass TestComponent extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            name:\"Test name\",\r\n            // color:this.props.color\r\n            counter:0,\r\n            isVisible:true\r\n        }\r\n        console.log(\"Hello from constructor\");\r\n        console.log(this.props.color);\r\n    }\r\n\r\n    /* LIFECYCLE\r\n    1. constructor\r\n    2. getDerivedStateFromProps\r\n    3. shouldComponentUpdate\r\n    4. render\r\n    5. getSnapshotBeforeUpdate\r\n    6. componentDidMount - componentDidUpdate\r\n    7. componentWillUnmount\r\n    */\r\n   \r\n    /*App.js den gönderilen propu state aktarmak için\r\n    constructor kullanmak şart değil. \r\n    aşağıdaki fonksiyonu react bu maksatla oluşturmuş*/\r\n    static getDerivedStateFromProps(props, state){\r\n        console.log(\"Hello from getDriveStateFromProps\");\r\n        console.log(\"props:\", props);\r\n        console.log(\"state:\", state);\r\n        /*state e ekler ya da değiştirir\r\n        renderdan önce bu fonksiyon çalışıyor*/\r\n        return {color:\"green\"};\r\n        // return {surname:\"test2\"};\r\n    }\r\n\r\n    /*Bu fonksiyon ilk açılışta getDerivedStateFromProps'dan ve render dan sonra çalışıyor\r\n    yeri değiştirilse bile bu şekilde*/\r\n    componentDidMount(){\r\n        console.log(\"Hello from compDidMount\");\r\n        console.log(\"state:\", this.state);\r\n        /*eğer bunu temizlemeden componentwillunmount çağırılırsa hata veriyor\r\n        componentwillunmount öncesi burayı nasıl temizliycez ki hata vermesin? \r\n        componentWillUnmout içinde clearTimeout ile bu eventi temizlememiz gerek hata vermemesi için*/\r\n        timeout=setTimeout(()=>{\r\n            this.setState({counter:this.state.counter+1});\r\n        },3000); \r\n    }\r\n\r\n    /*renderdan sonra çağırılır. updateden önceki state i verir*/\r\n    getSnapshotBeforeUpdate(){\r\n        console.log(\"prevprops:\", this.prevprops);\r\n        console.log(\"prevstates:\", this.prevstate);\r\n        return null;\r\n    }\r\n\r\n    /*arayüz update edildiğinde*/\r\n    componentDidUpdate(){\r\n        console.log(\"Hello from compDidUpdate\");\r\n        console.log(\"state:\", this.state);\r\n\r\n    }\r\n\r\n    /*arayüzden component çıkartılırken çağırılır*/\r\n    componentWillUnmount(){\r\n        console.log(\"Hello from compWillUnmount\");\r\n        console.log(\"state:\", this.state);\r\n        clearTimeout(timeout);\r\n    }\r\n\r\n    /*Bu da reactın fonksiyonu.\r\n    getDerivedStateFromPropsdan sonra çalışır.\r\n    return false dersek html arayüzü güncellenmez ama\r\n    stateler vs güncellenir */\r\n    shouldComponentUpdate(){\r\n        console.log(\"inside shouldComponentUpdate\");\r\n        /*counter 5 olana kadar arayüzü güncelleme, sonra güncelle*/\r\n        return this.state.counter<0 ? false : true;\r\n    }\r\n\r\n    /*Bu çağırıldığında yalnızca render ve constructor çağırılır\r\n    diğer fonksiyonlar yeniden çağırılmaz */\r\n    handleClick = ()=>{\r\n        this.setState({counter:this.state.counter+1});\r\n    }\r\n\r\n    /*BU TÜR FONKSİYONLARI YALNIZCA CLASS İÇİNDE YANİ BURADA ÇAĞIRABİLİYORUZ ANLADIĞIM KADARIYLA\r\n    ŞU AN BU FONKSİYONU KULLANMADIK. APP.JS İÇİNDE USESTATE İLE HALLETTİK BU İŞİ*/\r\n    isVisible=()=>{\r\n        this.setState({isVisible:!this.state.isVisible});\r\n    }\r\n\r\n    render(){\r\n        console.log(\"rendered state:\", this.state);\r\n        return (\r\n            <div>\r\n                <p>We can get prop from App.js directly</p>\r\n                <p>But in constroctor, we need to get props from super and constructor</p>\r\n                <p>{this.props.color}</p>\r\n                <p>{this.state.color}</p>\r\n                <button onClick={this.handleClick}>INCREASE {this.state.counter}</button>                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TestComponent;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport TestComponent from \"./TestComponent\";\nimport {useState} from \"react\";\n\nfunction App() {\n\n  /*SINIFA İHTİYAÇ DUYMADAN GLOBAL STATE DEĞİŞKENİ VE \n  BU DEĞİİKENİ DEĞİŞTİRMEK İÇİN FONKSİYON OLUŞURMAK İSTERSEK,\n  useState Hookunu KULLANIYORUZ.\n  BURADAKİ isVisible VS.NİN TestComponent.js İÇİNDEKİLERLE İLGİSİ YOK*/\n  const [isVisible, setIsVisible] = useState(true);\n\n  return (\n    <div className=\"App\">\n      {isVisible ? \n        <TestComponent color=\"red\"></TestComponent>\n      : \n        null\n      }\n      <button onClick={()=>setIsVisible(!isVisible)}>REMOVE</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}